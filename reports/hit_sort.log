Traceback (most recent call last):
  File "/home/thomas/Notebook/anaconda/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/home/thomas/Notebook/anaconda/lib/python3.7/site-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/thomas/Notebook/anaconda/lib/python3.7/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/thomas/Notebook/anaconda/lib/python3.7/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/home/thomas/Notebook/anaconda/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/home/thomas/Notebook/anaconda/lib/python3.7/site-packages/nbclient/client.py", line 541, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/home/thomas/Notebook/anaconda/lib/python3.7/site-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/thomas/Notebook/anaconda/lib/python3.7/site-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def HitFinder(runs,thr,roi,fit,adu_int,print_individual):
    x    = []; y    = []; adu    = []; ndroplets    = []
    rejx = []; rejy = []; rejadu = []; rejndroplets = []
    thrrat = thr[1] * (roi[1]-roi[0])/(fit[1]-fit[0]+fit[3]-fit[2])
    tot_hits,tot_imgs = 0,0
    for run in runs:
        tmp_x,tmp_y,tmp_adu,tmp_ndroplets,tmp_gmd = load_run(run)
        nimages = len(tmp_ndroplets)
        nhit  = 0; nmiss = 0; indx  = 0
        for i in np.arange(nimages-1):
            nroi_tmp = 0; n_tmp    = 0
            for j in np.arange(indx,indx + tmp_ndroplets[i]):
                if ((tmp_adu[j] >= adu_int[0]) & (tmp_adu[j] <= adu_int[1])):
                    if((tmp_y[j] >= roi[0]) & (tmp_y[j] <= roi[1])):   nroi_tmp += 1
                    elif((tmp_y[j] >= fit[0]) & (tmp_y[j] <= fit[1])): n_tmp += 1
                    elif((tmp_y[j] >= fit[2]) & (tmp_y[j] <= fit[3])): n_tmp += 1
            if n_tmp == 0.0: rat = float(nroi_tmp)
            else:            rat = float(nroi_tmp)/float(n_tmp)
            if (rat >= thrrat) and (nroi_tmp >= thr[0]):
                x.append(tmp_x[indx:indx + tmp_ndroplets[i]]); y.append(tmp_y[indx:indx + tmp_ndroplets[i]])
                adu.append(tmp_adu[indx:indx + tmp_ndroplets[i]]); ndroplets.append(tmp_ndroplets[i])
                nhit += 1
            else:
                rejx.append(tmp_x[indx:indx + tmp_ndroplets[i]]); rejy.append(tmp_y[indx:indx + tmp_ndroplets[i]])
                rejadu.append(tmp_adu[indx:indx + tmp_ndroplets[i]]); rejndroplets.append(tmp_ndroplets[i])
                nmiss += 1
            indx += tmp_ndroplets[i]
        if print_individual == True: print('  Hit rate of run {:d}: {:.4f}'.format(run, float(nhit)/float(nhit+nmiss)))
        tot_hits += nhit; tot_imgs += nhit + nmiss
    print('Total hit rate: {:.4f}, with totally {:d} runs'.format((float(tot_hits)/float(tot_imgs)),tot_imgs))
    x = np.concatenate(x); y = np.concatenate(y); adu = np.concatenate(adu)
    if len(rejx) > 0:
        rejx = np.concatenate(rejx); rejy = np.concatenate(rejy)
        rejadu = np.concatenate(rejadu); rejndroplets = rejndroplets
    else: rejx = x; rejy = y; rejadu = 0.01*adu; rejndroplets = ndroplets    
    return x,y,adu,ndroplets,[rejx,rejy,rejadu,rejndroplets]

def HitFinder(runs,thr,roi,fit,adu_int,print_individual,bt):
    # note: does not rotate the image before identifying hits
    x    = []; y    = []; adu    = []; ndroplets    = []; gmd    = []
    rejx = []; rejy = []; rejadu = []; rejndroplets = []; rejgmd = []
    thrrat = thr[1] * (roi[1]-roi[0])/(fit[1]-fit[0]+fit[3]-fit[2]); nrat = 0.0
    hitphot,hitrat,rejphot,rejrat = [],[],[],[]
    tot_hits,tot_imgs = 0,0
    for run in runs:
        tmp_x,tmp_y,tmp_adu,tmp_ndroplets,tmp_gmd = load_runs([run],bt)
        nimages = len(tmp_ndroplets)
        nhit  = 0; nmiss = 0; indx  = 0
        for i in np.arange(nimages-1):
            nroi_tmp = 0; n_tmp    = 0
            for j in np.arange(indx,indx + tmp_ndroplets[i]):
                if ((tmp_adu[j] >= adu_int[0]) & (tmp_adu[j] <= adu_int[1])):
                    if((tmp_y[j] >= roi[0]) & (tmp_y[j] <= roi[1])):   nroi_tmp += 1
                    elif((tmp_y[j] >= fit[0]) & (tmp_y[j] <= fit[1])): n_tmp += 1
                    elif((tmp_y[j] >= fit[2]) & (tmp_y[j] <= fit[3])): n_tmp += 1
            if n_tmp == 0.0: rat  = float(nroi_tmp); nrat += 1
            else:            rat = float(nroi_tmp)/float(n_tmp)
            if (rat >= thrrat) and (nroi_tmp >= thr[0]):
                hitphot.append(nroi_tmp); hitrat.append(rat*(fit[1]-fit[0]+fit[3]-fit[2])/(roi[1]-roi[0]))
                x.append(tmp_x[indx:indx + tmp_ndroplets[i]]); y.append(tmp_y[indx:indx + tmp_ndroplets[i]])
                adu.append(tmp_adu[indx:indx + tmp_ndroplets[i]]); ndroplets.append(tmp_ndroplets[i]); gmd.append(tmp_gmd[i])
                nhit += 1
            else:
                rejphot.append(nroi_tmp); rejrat.append(rat*(fit[1]-fit[0]+fit[3]-fit[2])/(roi[1]-roi[0]))
                rejx.append(tmp_x[indx:indx + tmp_ndroplets[i]]); rejy.append(tmp_y[indx:indx + tmp_ndroplets[i]])
                rejadu.append(tmp_adu[indx:indx + tmp_ndroplets[i]]); rejndroplets.append(tmp_ndroplets[i]); rejgmd.append(tmp_gmd[i])
                nmiss += 1
            indx += tmp_ndroplets[i]
        if print_individual == True: print('  Hit rate of run {:d}: {:.4f}'.format(run, float(nhit)/float(nhit+nmiss)))
        tot_hits += nhit; tot_imgs += nhit + nmiss
    print 'Hit rate: {:.4f}, including {:d} / {:d},'.format((float(tot_hits)/float(tot_imgs)),tot_hits,tot_imgs),'runs',runs[0],'-',runs[len(runs)-1]
    x = np.concatenate(x); y = np.concatenate(y); adu = np.concatenate(adu)
    if len(rejx) > 0:
        rejx = np.concatenate(rejx); rejy = np.concatenate(rejy)
        rejadu = np.concatenate(rejadu); rejndroplets = rejndroplets
    else: rejx = x; rejy = y; rejadu = 0.01*adu; rejndroplets = ndroplets; rejgmd = gmd 
    return x,y,adu,ndroplets,gmd,[rejx,rejy,rejadu,rejndroplets,rejgmd],[hitphot,hitrat,rejphot,rejrat]

def compare_hits(xaxis,runs,thr,roi,fit,adu_xes,print_rate,plot_spec):
    allx,ally,alladu,allndroplets,gmd = extract(runs)
    x,y,adu,ndroplets,rej = HitFinder(runs,thr,roi,fit,adu_xes,print_rate)
    img,vmin,vmax    = create_img(x,y,adu,adu_xes,False)
    allimg,vmin,vmax = create_img(allx,ally,alladu,adu_xes,False)
    rejimg,vmin,vmax = create_img(rej[0],rej[1],rej[2],adu_xes,False)
    spec = np.sum(remove_background(img, fit[0], fit[1], fit[2], fit[3])[:,roi[0]:roi[1]], axis=1)
    interpolate_epix_gap(spec)
    allspec = np.sum(remove_background(allimg, fit[0], fit[1], fit[2], fit[3])[:,roi[0]:roi[1]], axis=1)
    interpolate_epix_gap(allspec)
    rejspec = np.sum(remove_background(rejimg, fit[0], fit[1], fit[2], fit[3])[:,roi[0]:roi[1]], axis=1)
    interpolate_epix_gap(rejspec)
    if plot_spec == True:
        plt.plot(xaxis,spec)   ; plt.plot(xaxis,allspec)
        plt.plot(xaxis,rejspec); plt.plot(xaxis,allspec-spec)
        plt.ylim((0,1.05*max(allspec))); plt.xlim((6480,6500))
    return spec
##################
thr = [3,2.0] # hit thresholds: total hits in ROI and ratio
plt.figure(figsize=(8,6))
plt.subplot(221); plt.title('0F'); spec0F = compare_hits(xaxis,runs_0F,thr,roi,fit,adu_xes,True,True)
plt.subplot(222); plt.title('1F'); spec1F = compare_hits(xaxis,runs_1F,thr,roi,fit,adu_xes,True,True)
plt.subplot(223); plt.title('2F'); spec2F = compare_hits(xaxis,runs_2F,thr,roi,fit,adu_xes,True,True)
plt.subplot(224); plt.title('3F'); spec3F = compare_hits(xaxis,runs_3F,thr,roi,fit,adu_xes,True,True)
plt.subplot(221); plt.legend(('Hits','All','Misses','All - hits'),fontsize=9,loc='upper left')
plt.tight_layout()
plt.show()




def proj_spectrum(runs,roi,fit,adu_int,axis_para,thr,plot_proj,bt):
    if axis_para == False:
        xaxis = False
    else:
        xaxis = energy_axis(axis_para[0],axis_para[1],bt)
    if thr == False:
        x,y,adu,ndroplets,gmd = load_runs(runs,bt)
        print 'Looking at data from beamtime',bt,'with',len(ndroplets),'shots.'
        img,vmin,vmax = create_img(runs,x,y,adu,adu_int,adu_int[2],bt)
        if bt == 'LV30':
            img[:400,:] = 0.0
        elif bt == 'LS10':
            img[550:,:] = 0.0; img[:,:150] = 0.0; img[:,250:] = 0.0
        cor_spec = np.sum(remove_background(img, fit[0], fit[1], fit[2], fit[3])[:,roi[0]:roi[1]], axis=1)
        interpolate_epix_gap(cor_spec,bt)
        if plot_proj:
            tmp_spat = np.sum(img, axis=0)
            cor_spat = np.sum(remove_background(img, fit[0], fit[1], fit[2], fit[3]), axis=0)
            tmp_spec = np.sum(img[:,roi[0]:roi[1]], axis=1)
    else:
        x,y,adu,ndroplets,gmd,rej,hitinfo = HitFinder(runs,thr,roi,fit,adu_int,False,bt)
        img,vmin,vmax = create_img(runs,x,y,adu,adu_int,adu_int[2],bt)
        if bt == 'LV30':
            img[:400,:] = 0.0
        elif bt == 'LS10':
            img[550:,:] = 0.0; img[:,:150] = 0.0; img[:,250:] = 0.0
        cor_spec = np.sum(remove_background(img, fit[0], fit[1], fit[2], fit[3])[:,roi[0]:roi[1]], axis=1)
        interpolate_epix_gap(cor_spec,bt)
        if plot_proj:
            x_all,y_all,adu_all,ndroplets_all,gmd_all = load_runs(runs,bt)
            img_all,vmin,vmax = create_img(runs,x_all,y_all,adu_all,adu_int,adu_int[2],bt)
            cor_spat = np.sum(img, axis=0)
            tmp_spat = np.sum(img_all, axis=0)
            tmp_spec = np.sum(remove_background(img_all, fit[0], fit[1], fit[2], fit[3])[:,roi[0]:roi[1]], axis=1)
            interpolate_epix_gap(tmp_spec,bt)
    if plot_proj:
        fig = plt.figure(figsize=(12,3))
        ################
        plt.subplot(141); plt.title('Detector image',fontsize=9)
        plt.imshow(img, origin='lower',vmin=vmin, vmax=vmax,aspect='auto')
        plt.plot([roi[0],roi[0]],[roi[2],roi[3]],'w-'); plt.plot([roi[1],roi[1]],[roi[2],roi[3]],'w-')
        plt.plot([fit[0],fit[0]],[roi[2],roi[3]],'w--');plt.plot([fit[1],fit[1]],[roi[2],roi[3]],'w--')
        plt.plot([fit[2],fit[2]],[roi[2],roi[3]],'w--');plt.plot([fit[3],fit[3]],[roi[2],roi[3]],'w--')
        plt.xlim((fit[0]-20,fit[3]+20))
        plt.ylim((roi[2],roi[3]))
        plt.xticks(fontsize=8); plt.yticks(fontsize=9)
        ################
        plt.subplot(142); plt.title('Spatial projection',fontsize=9)
        plt.plot(tmp_spat/len(ndroplets))
        plt.plot(cor_spat/len(ndroplets),'r')
        plt.plot((tmp_spat-cor_spat)/len(ndroplets),'k')
        ylims = [0,0.8*max(tmp_spat)/len(ndroplets)]
        plt.plot([roi[0],roi[0]],ylims,'g');  plt.plot([roi[1],roi[1]],ylims,'g')
        plt.plot([fit[0],fit[0]],ylims,'g--');plt.plot([fit[1],fit[1]],ylims,'g--')
        plt.plot([fit[2],fit[2]],ylims,'g--');plt.plot([fit[3],fit[3]],ylims,'g--')
        plt.xlim((fit[0]-20,fit[3]+20))
        plt.ylim((0,1.05*max(tmp_spat)/len(ndroplets)))
        plt.xticks(fontsize=9); plt.yticks(fontsize=9)
        plt.ylabel('Signal / no. shots',fontsize=9)
        ################
        plt.subplot(143); plt.title('Spectrum',fontsize=9)
        if axis_para == False:
            plt.plot(tmp_spec/len(ndroplets))
            plt.plot(cor_spec/len(ndroplets),'r')
            plt.plot((tmp_spec-cor_spec)/len(ndroplets),'k')
        else:
            plt.plot(xaxis,tmp_spec/len(ndroplets))
            plt.plot(xaxis,cor_spec/len(ndroplets),'r')
            plt.plot(xaxis,(tmp_spec-cor_spec)/len(ndroplets),'k')
            plt.xlim(6480,6500)
        if thr == False: plt.legend(('Raw','Corr.','Bkgrd'),fontsize=9,loc='upper left')
        else:            plt.legend(('All','Hits','Diff.'),fontsize=9,loc='upper left')
        plt.ylabel('Signal / no. shots',fontsize=9)
        plt.ylim((0,1.05*max(tmp_spec)/len(ndroplets)))
        plt.xticks(fontsize=9); plt.yticks(fontsize=9)
        ################
        plt.subplot(144); plt.title('Final spectrum',fontsize=9)        
        if axis_para == False:
            plt.plot(cor_spec,'r')
        else:
            plt.plot(xaxis,cor_spec,'r')
            plt.xlim(6480,6500)
        plt.ylabel('Total intensity [counts]',fontsize=9)
        plt.ylim((0,1.05*max(cor_spec)))
        plt.xticks(fontsize=8); plt.yticks(fontsize=9)
        ################
        plt.tight_layout()
    return xaxis,cor_spec

------------------

[0;36m  File [0;32m"<ipython-input-1-f37cf2ebdaf2>"[0;36m, line [0;32m71[0m
[0;31m    print 'Hit rate: {:.4f}, including {:d} / {:d},'.format((float(tot_hits)/float(tot_imgs)),tot_hits,tot_imgs),'runs',runs[0],'-',runs[len(runs)-1][0m
[0m                                                   ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-f37cf2ebdaf2>, line 71)

